#!/bin/bash

set -e

#===========================================
# Check required commands.
#===========================================

for CMD_NAME in curl awk sed
do
  if ! type ${CMD_NAME} > /dev/null 2>&1; then
    echo "Requires ${CMD_NAME} command."
    echo "Please install ${CMD_NAME} command."
    exit 1
  fi
done

#===========================================
# Define common variables and functions.
#===========================================

#-------------------------------------------
# Define variables.
#
# NDW_VERSION                 : NDW version.
# NDW_ROOT                    : NDW root directory.
# NDW_BIN_DIR                 : NDW bin directory.
# NDW_VERSIONS_DIR            : Node.js root directory per version.
# NDW_DOWNLOADS_DIR           : NDW downloading directory.
# NDW_NAME                    : NDW command name.
# NDW_CLI_PATH                : NDW file path (this file path)
# NDW_DOWNLOADS_TIMEOUT       : NDW file download timeout (seconds)
# NDW_VERSION_NAME_SYSTEM     : NDW system version name.
# NODE_TAGS_URL               : Node.js repository tags URL.
# NODE_VERSION_FILE           : Node.js version file name.
# NODE_ENV_FILE               : Node.js environment variable definitions file name.
# NODE_GLOBAL_VERSION_FILE    : Node.js global version file name.
# NODE_BINARY_FILE_EXTENSION  : Node.js binary archive file extension.
# NODE_BINARY_FILE_FORMAT     : Node.js binary file name format.
# NODE_BINARY_URL_FORMAT      : Node.js binary url format.
#-------------------------------------------
readonly NDW_VERSION="4.0.0"
readonly NDW_ROOT=${NDW_ROOT:-"$HOME/.ndw"}
readonly NDW_BIN_DIR="${NDW_ROOT}/bin"
readonly NDW_VERSIONS_DIR="${NDW_ROOT}/versions"
readonly NDW_DOWNLOADS_DIR="${NDW_ROOT}/downloads"
readonly NDW_NAME=${0##*/}
readonly NDW_CLI_PATH=$(printf "$0" | xargs readlink)
readonly NDW_DOWNLOADS_TIMEOUT=3600
readonly NDW_VERSION_NAME_SYSTEM="system"
readonly NODE_TAGS_URL="https://nodejs.org/dist/"
readonly NODE_VERSION_FILE=".node-version"
readonly NODE_ENV_FILE=".env"
readonly NODE_GLOBAL_VERSION_FILE="version"
readonly NODE_BINARY_FILE_EXTENSION="tar.gz"
readonly NODE_BINARY_FILE_FORMAT="node-%s-%s-%s.${NODE_BINARY_FILE_EXTENSION}"
readonly NODE_BINARY_URL_FORMAT="https://nodejs.org/dist/%s/%s"


#-------------------------------------------
# Output cat file
#
# 1 : The directory path.
# 2 : File name
#-------------------------------------------
cat_file() {

  local DIR_PATH="$1"
  local FILE_NAME="$2"
  echo -n "$([[ -e ${DIR_PATH}/${FILE_NAME} ]] && echo -n $(cat ${DIR_PATH}/${FILE_NAME} | tr -d '\n'))"

}

#-------------------------------------------
# Output nearly kocal version file.
#
# 1 : The root directory.
#-------------------------------------------
find_local_version() {

  local DIR_PATH="$1"
  local NODE_VERSION="$(cat_file ${DIR_PATH} ${NODE_VERSION_FILE})"

  # find node version file in parent directory
  while [ -z "${NODE_VERSION}" -a "${DIR_PATH}" != '' ]
  do
    DIR_PATH="${DIR_PATH%/*}"
    NODE_VERSION="$(cat_file ${DIR_PATH} ${NODE_VERSION_FILE})"
  done

  echo -n "${NODE_VERSION}"

}

#-------------------------------------------
# Output nearly version file.
#
# 1 : The root directory.
#-------------------------------------------
find_version() {

  local DIR_PATH="$1"
  local NODE_VERSION="$(find_local_version ${DIR_PATH})"

  # Empty version?
  if [[ -z "${NODE_VERSION}" && -e "${NDW_ROOT}/${NODE_GLOBAL_VERSION_FILE}" ]]; then

    # using global version
    NODE_VERSION="$(cat_file ${NDW_ROOT} ${NODE_GLOBAL_VERSION_FILE})"

  fi

  echo -n "${NODE_VERSION}"

}

#-------------------------------------------
# Output nearly env file path.
#
# 1 : The root directory.
#-------------------------------------------
find_env_path() {

  local DIR_PATH="$1"
  local NODE_ENV_PATH="${DIR_PATH}/${NODE_ENV_FILE}"

  # find version file in parent directory
  while [[ ! -e ${NODE_ENV_PATH} && -n "${DIR_PATH}" ]]
  do
    DIR_PATH="${DIR_PATH%/*}"
    NODE_ENV_PATH="${DIR_PATH}/${NODE_ENV_FILE}"
  done

  if [[ -e "${NODE_ENV_PATH}" ]]; then
    echo -n "${NODE_ENV_PATH}"
  else
    echo -n ""
  fi

}

#-------------------------------------------
# Output system node binary path.
#-------------------------------------------
find_system_node_dir_path() {

  local NODE_PATHS=($(which -a node))
  local SELECT_NODE_PATH=""

  for NODE_PATH in ${NODE_PATHS[@]}
  do
    if [[ "${NDW_BIN_DIR}/node" == "${NODE_PATH}" ]]; then
      continue;
    fi

    SELECT_NODE_PATH=${NODE_PATH}
    break
  done

  echo -n "${SELECT_NODE_PATH%/*}"

}

#-------------------------------------------
# Output file name of Node.js binary
#
# 1 : Install version
#-------------------------------------------
node_binary_file() {

  local INSTALL_VERSION="$1"
  local OS_NAME=$(uname -s | tr '[:upper:]' '[:lower:]')
  local ARCH_NAME=$(uname -m)
  local USING_ARCH_NAME

  # Convert arch name
  case ${ARCH_NAME} in
    x86_64)
      USING_ARCH_NAME="x64"
      ;;
    x86)
      USING_ARCH_NAME="x86"
      ;;
    aarch64)
      USING_ARCH_NAME="arm64"
      ;;
    *)
      USING_ARCH_NAME=${ARCH_NAME}
      ;;
  esac

  # Output file name
  printf ${NODE_BINARY_FILE_FORMAT} ${INSTALL_VERSION} ${OS_NAME} ${USING_ARCH_NAME}

}

#-------------------------------------------
# Output URL of Node.js binary
#
# 1 : Install version
#-------------------------------------------
node_binary_url() {

  local INSTALL_VERSION="$1"

  # Output url
  printf ${NODE_BINARY_URL_FORMAT} ${INSTALL_VERSION} $(node_binary_file ${INSTALL_VERSION})

}

#-------------------------------------------
# Sort list of versions
#
# 1 : versions list
#-------------------------------------------
sort_versions() {

  cat - | awk '{gsub("v", ""); print $0;}' | sort -t "." -k 1n -k 2n -k 3n | awk '{print "v" $1}'

}

#-------------------------------------------
# Get latest yarn version
#-------------------------------------------
latest_yarn_version() {

  curl -Ls https://legacy.yarnpkg.com/latest-version

}

#-------------------------------------------
# Get latest pnpm version
#-------------------------------------------
latest_pnpm_version() {

  curl -Ls "https://github.com/pnpm/pnpm/tags" | grep -o -E "<a href=\"/pnpm/pnpm/releases/tag/([^\"]+)" \
  | awk '{ gsub("<a href=\"/pnpm/pnpm/releases/tag/", ""); print $1 }' \
  | sort_versions | tail -n 1 | tr -d '\n'

}

#-------------------------------------------
# Execute command in specified version.
#
# 1   : Node.js version
# 2   : Command name
# 3.. : Command arguments
#-------------------------------------------
exec_command() {

  local NODE_VERSION=$1

  # Empty version?
  if [[ -z ${NODE_VERSION} ]]; then
    # use system version
    NODE_VERSION="${NDW_VERSION_NAME_SYSTEM}"
  fi

  # No installed specified version?
  if [[ ! -e "${NDW_VERSIONS_DIR}/${NODE_VERSION}" && "${NODE_VERSION}" != "${NDW_VERSION_NAME_SYSTEM}" ]]; then
    # auto install specified version
    cmd_install "${NODE_VERSION}"
  fi

  local CURRENT_DIR="$(pwd)"
  local EXEC_COMMAND=$2

  # load envfile path
  local NODE_ENV_PATH=$(find_env_path ${CURRENT_DIR})

  # define environment variables?
  if [[ -n ${NODE_ENV_PATH} ]]; then

    # load environment variables
    eval "$(sed -E '/^#/d;s;^(.+)=(.+)$;export \1=\2;g' ${NODE_ENV_PATH})"

  fi

  if [[ "${NODE_VERSION}" == "${NDW_VERSION_NAME_SYSTEM}" ]]; then
    local NODE_BIN=$(find_system_node_dir_path)
  else 
    local NODE_ROOT="${NDW_VERSIONS_DIR}/${NODE_VERSION}"
    local NODE_BIN="${NODE_ROOT}/bin"
  fi

  # set node binary path
  export PATH="${NODE_BIN}:${PATH}"

  # execute commands
  if type ${EXEC_COMMAND} > /dev/null 2>&1; then

    local EXEC_REAL_PATH=$(which ${EXEC_COMMAND} | head -n 1 | xargs readlink)

    # If exec command and this cli path are different?
    if [[ ${EXEC_REAL_PATH} != ${NDW_CLI_PATH} ]]; then

      "${EXEC_COMMAND}" "${@:3}"
      return $?

    fi

  fi

  case ${EXEC_COMMAND} in
  yarn)
    echo "Please install yarn command."
    echo ""
    echo "    ndw install-yarn [<yarn version>]."
    echo ""
    ;;
  pnpm|pnpx)
    echo "Please install pnpm command."
    echo ""
    echo "    ndw install-pnpm [<pnpm version>]."
    echo ""
    ;;
  *)
    echo "Not found specified command."
    ;;
  esac

  exit 1

}

#===========================================
# Usages.
#===========================================

#-------------------------------------------
# View usage "ndw" options
#-------------------------------------------
usage_ndw() {

  cat << EOF
Usage: ${NDW_NAME} <command> [<options>]

    install <version>               Install <version>.
    uninstall <version>             Uninstall <version>.
    local [<version>]               Set the local application-specific Node.js version.
    global [<version>]              Set the global Node.js version.
    list                            List installed Node.js versions or available Node.js versions.
    env [<shell name>]              Print export statements for definition variables from ".env" file.
    exec <command>                  Execute global module commands in current Node.js version.
    node                            Execute node command in current Node.js version.
    npm                             Execute npm command in current Node.js version.
    npx                             Execute npx command in current Node.js version.
    yarn                            Execute yarn command in current Node.js version.
    pnpm                            Execute pnpm command in current Node.js version.
    pnpx                            Execute pnpx command in current Node.js version.
    install-yarn [<yarn version>]   Install or upgrade yarn in current Node.js version.
    install-pnpm [<pnpm version>]   Install or upgrade pnpm in current Node.js version.
    current                         Show current Node.js version.
    version                         Show ${NDW_NAME} version number.
EOF

}

#-------------------------------------------
# View usage "ndw install" options
#-------------------------------------------
usage_ndw_install() {

  cat << EOF
Usage: ${NDW_NAME} install [<args>] [<version>]

    -h            Show this message.
    -s            Skip displaying prompt for reinstall specified version.
EOF

}

#-------------------------------------------
# View usage "ndw list" options
#-------------------------------------------
usage_ndw_list() {

  cat << EOF
Usage: ${NDW_NAME} list [<args>]

    -h            Show this message.
    -l            List installed local versions.
    -r            List remote versions.
EOF

}


#===========================================
# Sub commands of ndw.
#===========================================

#-------------------------------------------
# shellenv
#-------------------------------------------
cmd_shellenv() {

  local SHELL_NAME="${1:-${SHELL##*/}}"

  case "${SHELL_NAME}" in
  fish)
    echo 'set -gx NDW_HOME "$HOME/.ndw";'
    echo '! set -q PATH; and set PATH ''; set -gx PATH "$HOME/.ndw/bin" $PATH;'
    ;;

  zsh|bash)
    echo 'export NDW_HOME="$HOME/.ndw"'
    echo 'export PATH="$HOME/.ndw/bin${PATH+:$PATH}"'
    ;;

  *)
    echo "Not supported shell command for ${SHELL_NAME}"
    ;;
  esac

}

#-------------------------------------------
# install
#-------------------------------------------
cmd_install() {

  local CURRENT_VERSION=""
  local SKIP_REINSTALLED_VERSION=""

  while getopts hs OPTION "$@"
  do
    case ${OPTION} in
      s)
        SKIP_REINSTALLED_VERSION="y"
        ;;
      *)
        usage_ndw_install;
        exit 0
        ;;
    esac
  done
  shift $(($OPTIND - 1))

  local CURRENT_VERSION="$(find_version $(pwd))"
  local INSTALL_VERSION=${1:-"${CURRENT_VERSION}"}

  # Empty version?
  if [[ -z ${INSTALL_VERSION} ]]; then
    echo "No specify install Node.js version."
    exit 1
  fi

  local REMOTE_BINARY_URL="$(node_binary_url ${INSTALL_VERSION})"
  local BINARY_FILE_NAME="$(node_binary_file ${INSTALL_VERSION})"
  local DOWNLOAD_BINARY_PATH="${NDW_DOWNLOADS_DIR}/${BINARY_FILE_NAME}"
  local STATUS_CODE=$(curl -Is ${REMOTE_BINARY_URL} -o /dev/null -w "%{http_code}")

  # Not exists version?
  if [[ ${STATUS_CODE} != "200" ]]; then
    echo "Not found specify this version."
    exit 1
  fi

  # Already installed version?
  if [[ -e "${NDW_VERSIONS_DIR}/${INSTALL_VERSION}" ]]; then

    # Skip re-installed version?
    [[ "${SKIP_REINSTALLED_VERSION}" = "y" ]] && exit 0

    echo "Already installed this version."
    read -p "Continue with installation? (y/N) : " CONTINUE_INSTALL
    [[ $(printf "${CONTINUE_INSTALL}" | tr '[:upper:]' '[:lower:]') != "y" ]] && exit 0

  fi

  echo "Installing ${INSTALL_VERSION}...."

  # creates downloading directory and download specified version binary
  mkdir -p ${NDW_DOWNLOADS_DIR} && curl -Ls -m ${NDW_DOWNLOADS_TIMEOUT} "${REMOTE_BINARY_URL}" -o "${DOWNLOAD_BINARY_PATH}"

  # Decompress binary package
  mkdir -p "${NDW_VERSIONS_DIR}" && tar zxf "${DOWNLOAD_BINARY_PATH}" -C "${NDW_VERSIONS_DIR}"
  rm -rf "${NDW_VERSIONS_DIR}/${INSTALL_VERSION}"
  mv "${NDW_VERSIONS_DIR}/$(basename ${BINARY_FILE_NAME} .${NODE_BINARY_FILE_EXTENSION})" "${NDW_VERSIONS_DIR}/${INSTALL_VERSION}"

  echo "Complete installing ${INSTALL_VERSION}."

}

#-------------------------------------------
# uninstall
#-------------------------------------------
cmd_uninstall() {

  local INSTALL_VERSION=$1
  local DOWNLOAD_BINARY_PATH="${NDW_DOWNLOADS_DIR}/$(node_binary_file ${INSTALL_VERSION})"

  # Not install version?
  if [[ ! -e "${NDW_VERSIONS_DIR}/${INSTALL_VERSION}" ]]; then
    echo "Not found this version."
    exit 1
  fi

  # Confirm uninstall specified version
  read -p "Uninstall ${INSTALL_VERSION}? (y/N) : " CONFIRM_UNINSTALL

  # Uninstall yes?
  if [[ ${CONFIRM_UNINSTALL} = "y" ]]; then

    # Decompress binary package
    rm -rf "${DOWNLOAD_BINARY_PATH}" "${NDW_VERSIONS_DIR}/${INSTALL_VERSION}"

    [[ $? -eq 0 ]] && echo "Complete uninstalling ${INSTALL_VERSION}."

  fi

}

#-------------------------------------------
# list
#-------------------------------------------
cmd_list() {

  while getopts hrl OPTION "$@"
  do
    case ${OPTION} in
      r)
        curl -Ls "${NODE_TAGS_URL}" | grep -o -E "v([0-9\.]+)/</a>" | awk '{gsub("/</a>", ""); print $0;}' | sort_versions
        exit 0
        ;;
      l)
        [[ -e ${NDW_VERSIONS_DIR} ]] && ls ${NDW_VERSIONS_DIR} | sort_versions
        exit 0
        ;;
      *)
        usage_ndw_list;
        exit 0
        ;;
    esac
  done
  usage_ndw_list

}

#-------------------------------------------
# local
#-------------------------------------------
cmd_local() {

  local USING_VERSION=$1

  # No specified version?
  if [[ -z ${USING_VERSION} ]]; then

    local NODE_VERSION=$(find_local_version $(pwd))

    # Not found global version file?
    if [[ -n ${NODE_VERSION} ]]; then

      # Output local version
      echo "${NODE_VERSION}"
      exit 0

    else

      echo "No specify local version."
      exit 1

    fi

  fi

  # No installed specified version?
  if [[ ! -e "${NDW_VERSIONS_DIR}/${USING_VERSION}" && "${USING_VERSION}" != "${NDW_VERSION_NAME_SYSTEM}" ]]; then
    echo "No installed specified version."
    exit 1
  fi

  # creates global version file
  printf "${USING_VERSION}" > "$(pwd)/${NODE_VERSION_FILE}"

}

#-------------------------------------------
# global
#-------------------------------------------
cmd_global() {

  local USING_VERSION=$1

  # No specified version?
  if [[ -z ${USING_VERSION} ]]; then

    # Not found global version file?
    if [[ -e "${NDW_ROOT}/${NODE_GLOBAL_VERSION_FILE}" ]]; then

      # Output global version
      cat_file ${NDW_ROOT} ${NODE_GLOBAL_VERSION_FILE}
      exit 0

    else

      echo "${NDW_VERSION_NAME_SYSTEM}"
      exit 0

    fi

  fi

  # No installed specified version?
  if [[ ! -e "${NDW_VERSIONS_DIR}/${USING_VERSION}" && "${USING_VERSION}" != "${NDW_VERSION_NAME_SYSTEM}" ]]; then
    echo "No installed specified version."
    exit 1
  fi

  # creates global version file
  printf "${USING_VERSION}" > "${NDW_ROOT}/${NODE_GLOBAL_VERSION_FILE}"

}

#-------------------------------------------
# env
#-------------------------------------------
cmd_env() {

  local SHELL_NAME=${1:-"${SHELL##*/}"}
  local NODE_ENV_PATH=$(find_env_path $(pwd))

  case "${SHELL_NAME}" in
  bash|zsh)
    if [[ -n ${NODE_ENV_PATH} ]]; then
      awk -F'\n' '/^([^#.]+)/ {print "export " $1}' ${NODE_ENV_PATH}
    fi
    ;;

  fish)
    if [[ -n ${NODE_ENV_PATH} ]]; then
      awk -F'\n' '/^([^#.]+)/ {gsub("=", " ", $1); print "set -x " $1;}' ${NODE_ENV_PATH}
    fi
    ;;

  *)
    echo "${SHELL_NAME} is not supported shell."
    ;;
  esac

}

#-------------------------------------------
# exec
#-------------------------------------------
cmd_exec() {

  exec_command "$(find_version $(pwd))" "$@"

}

#-------------------------------------------
# node
#-------------------------------------------
cmd_node() {

  exec_command "$(find_version $(pwd))" node "$@"

}

#-------------------------------------------
# npm
#-------------------------------------------
cmd_npm() {

  exec_command "$(find_version $(pwd))" npm "$@"

}

#-------------------------------------------
# npx
#-------------------------------------------
cmd_npx() {

  exec_command "$(find_version $(pwd))" npx "$@"

}

#-------------------------------------------
# yarn
#-------------------------------------------
cmd_yarn() {

  exec_command "$(find_version $(pwd))" yarn "$@"

}

#-------------------------------------------
# pnpm
#-------------------------------------------
cmd_pnpm() {

  exec_command "$(find_version $(pwd))" pnpm "$@"

}

#-------------------------------------------
# pnpx
#-------------------------------------------
cmd_pnpx() {

  exec_command "$(find_version $(pwd))" pnpx "$@"

}

#-------------------------------------------
# corepack
#-------------------------------------------
cmd_corepack() {

  exec_command "$(find_version $(pwd))" corepack "$@"

}

#-------------------------------------------
# install-yarn
#-------------------------------------------
cmd_install_yarn() {

  local USING_YARN_VERSION=$1
  local NODE_VERSION="$(find_version $(pwd))"

  # No specify yarn version?
  if [[ -z ${USING_YARN_VERSION} ]]; then

    local LOCAL_YARN_VERSION=$(cmd_yarn --version | tr -d '\n')
    local REMOTE_YARN_VERSION=$(latest_yarn_version)

    # Same local version and remote version?
    if [[ ${LOCAL_YARN_VERSION} = ${REMOTE_YARN_VERSION} ]]; then
      exit 0
    fi

    # Set using yarn version
    USING_YARN_VERSION="latest"

  fi

  # Install latest yarn.
  exec_command "${NODE_VERSION}" npm i -g yarn@${USING_YARN_VERSION}

}

#-------------------------------------------
# install-pnpm
#-------------------------------------------
cmd_install_pnpm() {

  local USING_PNPM_VERSION=$1
  local NODE_VERSION="$(find_version $(pwd))"

  # No specify pnpm version?
  if [[ -z ${USING_PNPM_VERSION} ]]; then

    local LOCAL_PNPM_VERSION=$(cmd_pnpm --version | tr -d '\n')
    local REMOTE_PNPM_VERSION=$(latest_pnpm_version)

    # Same local version and remote version?
    if [[ ${LOCAL_PNPM_VERSION} = ${REMOTE_PNPM_VERSION} ]]; then
      exit 0
    fi

    # Set using pnpm version
    USING_PNPM_VERSION=${REMOTE_PNPM_VERSION}

  fi

  # Install latest pnpm.
  exec_command "${NODE_VERSION}" npm i -g pnpm@${USING_PNPM_VERSION}

}

#-------------------------------------------
# current
#-------------------------------------------
cmd_current() {

  local CURRENT_VERSION="$(find_version $(pwd))"

  # Empty version?
  if [[ -z ${CURRENT_VERSION} ]]; then
    echo "No specify using Node.js version."
    exit 1
  fi

  echo "${CURRENT_VERSION}"

}

#-------------------------------------------
# version
#-------------------------------------------
cmd_version() {

  echo "${NDW_VERSION}"

}


#===========================================
# Entry point of ndw.
#===========================================

case ${NDW_NAME} in
  ndw)
    # Operations per command.
    case "$1" in
      shellenv)
        cmd_shellenv "${@:2}"
        ;;
      install)
        cmd_install "${@:2}"
        ;;
      uninstall)
        cmd_uninstall "${@:2}"
        ;;
      list)
        cmd_list "${@:2}"
        ;;
      local)
        cmd_local "${@:2}"
        ;;
      global)
        cmd_global "${@:2}"
        ;;
      env)
        cmd_env "${@:2}"
        ;;
      exec)
        cmd_exec "${@:2}"
        ;;
      node)
        cmd_node "${@:2}"
        ;;
      npm)
        cmd_npm "${@:2}"
        ;;
      npx)
        cmd_npx "${@:2}"
        ;;
      yarn)
        cmd_yarn "${@:2}"
        ;;
      pnpm)
        cmd_pnpm "${@:2}"
        ;;
      pnpx)
        cmd_pnpx "${@:2}"
        ;;
      corepack)
        cmd_corepack "${@:2}"
        ;;
      install-yarn)
        cmd_install_yarn "${@:2}"
        ;;
      install-pnpm)
        cmd_install_pnpm "${@:2}"
        ;;
      current)
        cmd_current "${@:2}"
        ;;
      version)
        cmd_version "${@:2}"
        ;;
      *)
        usage_ndw
        ;;
    esac
    ;;
  node)
    cmd_node "$@"
    ;;
  npm)
    cmd_npm "$@"
    ;;
  npx)
    cmd_npx "$@"
    ;;
  yarn)
    cmd_yarn "$@"
    ;;
  pnpm)
    cmd_pnpm "$@"
    ;;
  pnpx)
    cmd_pnpx "$@"
    ;;
  corepack)
    cmd_corepack "$@"
    ;;
  *)
    echo "Illegal command executed."
    exit 1
    ;;
esac
